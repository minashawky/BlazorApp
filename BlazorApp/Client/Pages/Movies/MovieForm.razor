@inject IPersonRepository personRepository

<EditForm Model="Movie" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Title</label>
        <div>
            <InputText class="form-control" @bind-Value="Movie.Title" />
            <ValidationMessage For="@(() => Movie.Title)" />
        </div>
    </div>
    <div class="form-group">
        <label>In Theatres</label>
        <div>
            <InputCheckbox @bind-Value="Movie.InTheatres" />
            <ValidationMessage For="@(() => Movie.InTheatres)" />
        </div>
    </div>
    <div class="form-group">
        <label>Trailer</label>
        <div>
            <InputText class="form-control" @bind-Value="Movie.Trailer" />
            <ValidationMessage For="@(() => Movie.Trailer)" />
        </div>
    </div>
    <div class="form-group">
        <label>Release Date</label>
        <div>
            <InputDate class="form-control" @bind-Value="Movie.ReleaseDate" />
            <ValidationMessage For="@(() => Movie.ReleaseDate)" />
        </div>
    </div>
    <div class="form-group">
        <InputImage Label="Poster" OnSelectedImage="PosterSelected" ImageUrl="@imageUrl" />
    </div>
    <div class="form-group form-markdown">
        <InputMarkdown @bind-Value="Movie.Summary" Label="Summary" For="@(() => Movie.Summary)" />
    </div>
    <div class="form-group">
        <label>Genres</label>
        <MultipleSelector Selected="selected" NotSelected="notSelected"></MultipleSelector>
    </div>
    <div class="form-group">
        <label>Actors</label>
        <div>
            <MultipleSelectorTypeahead Context="person" SearchMethod="SearchMethod" SelectedElements="SelectedActors">
                <MyResultTemplate>
                    <img style="width:50px" src="@person.Picture" />
                    @person.Name
                </MyResultTemplate>
                <MyListTemplate>
                    @person.Name / <input type="text" placeholder="Character" @bind="person.Character" />
                </MyListTemplate>
            </MultipleSelectorTypeahead>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Save changes</button>
</EditForm>

@code {

    [Parameter] public Movie Movie { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Genre> SelectedGenres { get; set; } = new List<Genre>();
    [Parameter] public List<Genre> NotSelectedGenres { get; set; } = new List<Genre>();
    [Parameter] public List<Person> SelectedActors { get; set; } = new List<Person>();

    private List<MultipleSelectorModel> selected = new List<MultipleSelectorModel>();
    private List<MultipleSelectorModel> notSelected = new List<MultipleSelectorModel>();

    private string imageUrl;

    protected override void OnInitialized()
    {
        selected = SelectedGenres.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
        notSelected = NotSelectedGenres.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();

        if (!string.IsNullOrEmpty(Movie.Poster))
        {
            imageUrl = Movie.Poster;
            Movie.Poster = null;
        }
    }

    private void PosterSelected(string imageBase64)
    {
        Movie.Poster = imageBase64;
        imageUrl = null;
        Console.WriteLine(imageBase64);
    }

    private async Task<IEnumerable<Person>> SearchMethod(string searchText)
    {
        return await personRepository.GetPeopleByName(searchText);
    }

    private async Task OnDataAnnotationsValidated()
    {
        Movie.MovieGenres =
            selected.Select(x => new MoviesGenres { GenreId = int.Parse(x.Key) }).ToList();

        Movie.MovieActors =
            SelectedActors.Select(x => new MoviesActors { PersonId = x.Id, Character = x.Character }).ToList();

        if(!string.IsNullOrWhiteSpace(Movie.Poster))
        {
            imageUrl = null;
        }

        await OnValidSubmit.InvokeAsync(null);
    }
}
